app.post("/api/top-up", async (req, res) => {
    const { userId, amount, cardNumber } = req.body;

    // Validation
    if (!userId || amount === undefined || !cardNumber) {
        return res.status(400).json({ error: "Missing required fields." });
    }

    if (typeof amount !== "number" || isNaN(amount) || amount <= 0) {
        return res.status(400).json({ error: "Invalid top-up amount." });
    }

    if (!/^\d{16}$/.test(cardNumber)) {
        return res.status(400).json({ error: "Invalid card number." });
    }

    const client = await pool.connect();

    try {
        await client.query("BEGIN");

        // Fetch current balance
        const userResult = await client.query(
            "SELECT balance FROM users WHERE user_id = $1 FOR UPDATE",
            [userId]
        );
        if (userResult.rows.length === 0) {
            throw new Error("User not found.");
        }

        let currentBalance = parseFloat(userResult.rows[0].balance);
        if (isNaN(currentBalance)) currentBalance = 0;

        // Update balance
        const updatedBalance = currentBalance + amount;
        await client.query(
            "UPDATE users SET balance = $1 WHERE user_id = $2",
            [updatedBalance, userId]
        );

        // Insert payment record
        const insertPaymentQuery = `
            INSERT INTO payments (user_id, amount, status, transaction_date)
            VALUES ($1, $2, 'completed', NOW())
        `;
        await client.query(insertPaymentQuery, [userId, amount]);

        await client.query("COMMIT");

        res.status(200).json({
            message: "Top-up successful.",
            updatedBalance: updatedBalance,
        });
    } catch (error) {
        await client.query("ROLLBACK");
        console.error("Error during top-up:", error);
        res.status(500).json({ error: "Internal server error during top-up." });
    } finally {
        client.release();
    }
});








app.post("/api/place-order", async (req, res) => {
    const { items, deliveryDate, deliveryFee, serviceFee, tax, userId, householdId } = req.body;

    if (!items || !items.length || !deliveryDate || !userId) {
        return res.status(400).json({ error: "Invalid order details." });
    }

    const client = await pool.connect();

    try {
        await client.query("BEGIN");

        // Calculate the total cost
        const grocerySubtotal = items.reduce((sum, item) => sum + item.unit_price * item.quantity, 0);
        const totalRequired = grocerySubtotal + parseFloat(tax) + parseFloat(deliveryFee) + parseFloat(serviceFee);

        // Fetch the user's current balance
        const userBalanceQuery = `SELECT COALESCE(balance, 0) AS balance FROM users WHERE user_id = $1`;
        const userBalanceResult = await client.query(userBalanceQuery, [userId]);

        if (userBalanceResult.rows.length === 0) {
            throw new Error("User not found.");
        }

        const userBalance = parseFloat(userBalanceResult.rows[0].balance);

        if (userBalance < totalRequired) {
            const shortfall = (totalRequired - userBalance).toFixed(2);
            await client.query("ROLLBACK");
            return res.status(400).json({
                error: "Insufficient balance",
                message: `You need an additional $${shortfall} to proceed.`,
            });
        }

        // Deduct the totalRequired amount from the user's balance
        const updateBalanceQuery = `
            UPDATE users
            SET balance = balance - $1
            WHERE user_id = $2
        `;
        await client.query(updateBalanceQuery, [totalRequired, userId]);

        // Create the order
        const orderQuery = `
            INSERT INTO orders (user_id, household_id, total_cost, delivery_fee, service_fee, tax, status, created_at, delivery_date)
            VALUES ($1, $2, $3, $4, $5, $6, 'Pending', NOW(), $7)
            RETURNING order_id
        `;
        const orderResult = await client.query(orderQuery, [
            userId,
            householdId || null,
            grocerySubtotal + tax,
            deliveryFee,
            serviceFee,
            tax,
            deliveryDate,
        ]);

        const orderId = orderResult.rows[0].order_id;

        // Insert items into order_items
        const orderItemsQuery = `
            INSERT INTO order_items (order_id, product_id, user_id, quantity, unit_price, subtotal)
            VALUES ($1, $2, $3, $4, $5, $6)
        `;
        for (const item of items) {
            await client.query(orderItemsQuery, [
                orderId,
                item.product_id,
                userId,
                item.quantity,
                item.unit_price,
                item.unit_price * item.quantity,
            ]);
        }

        await client.query("COMMIT");

        res.status(200).json({ message: "Order placed successfully.", orderId });
    } catch (error) {
        await client.query("ROLLBACK");
        console.error("Error placing order:", error);
        res.status(500).json({ error: "Failed to place order." });
    } finally {
        client.release();
    }
});




















